// Code generated by mockery v2.32.3. DO NOT EDIT.

package operator

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Mockphaser is an autogenerated mock type for the phaser type
type Mockphaser struct {
	mock.Mock
}

type Mockphaser_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockphaser) EXPECT() *Mockphaser_Expecter {
	return &Mockphaser_Expecter{mock: &_m.Mock}
}

// after provides a mock function with given fields: ctx
func (_m *Mockphaser) after(ctx context.Context) {
	_m.Called(ctx)
}

// Mockphaser_after_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'after'
type Mockphaser_after_Call struct {
	*mock.Call
}

// after is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Mockphaser_Expecter) after(ctx interface{}) *Mockphaser_after_Call {
	return &Mockphaser_after_Call{Call: _e.mock.On("after", ctx)}
}

func (_c *Mockphaser_after_Call) Run(run func(ctx context.Context)) *Mockphaser_after_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Mockphaser_after_Call) Return() *Mockphaser_after_Call {
	_c.Call.Return()
	return _c
}

func (_c *Mockphaser_after_Call) RunAndReturn(run func(context.Context)) *Mockphaser_after_Call {
	_c.Call.Return(run)
	return _c
}

// commit provides a mock function with given fields: ctx
func (_m *Mockphaser) commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockphaser_commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'commit'
type Mockphaser_commit_Call struct {
	*mock.Call
}

// commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Mockphaser_Expecter) commit(ctx interface{}) *Mockphaser_commit_Call {
	return &Mockphaser_commit_Call{Call: _e.mock.On("commit", ctx)}
}

func (_c *Mockphaser_commit_Call) Run(run func(ctx context.Context)) *Mockphaser_commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Mockphaser_commit_Call) Return(_a0 error) *Mockphaser_commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockphaser_commit_Call) RunAndReturn(run func(context.Context) error) *Mockphaser_commit_Call {
	_c.Call.Return(run)
	return _c
}

// operationDiff provides a mock function with given fields: ctx
func (_m *Mockphaser) operationDiff(ctx context.Context) map[string]interface{} {
	ret := _m.Called(ctx)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Mockphaser_operationDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'operationDiff'
type Mockphaser_operationDiff_Call struct {
	*mock.Call
}

// operationDiff is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Mockphaser_Expecter) operationDiff(ctx interface{}) *Mockphaser_operationDiff_Call {
	return &Mockphaser_operationDiff_Call{Call: _e.mock.On("operationDiff", ctx)}
}

func (_c *Mockphaser_operationDiff_Call) Run(run func(ctx context.Context)) *Mockphaser_operationDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Mockphaser_operationDiff_Call) Return(_a0 map[string]interface{}) *Mockphaser_operationDiff_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockphaser_operationDiff_Call) RunAndReturn(run func(context.Context) map[string]interface{}) *Mockphaser_operationDiff_Call {
	_c.Call.Return(run)
	return _c
}

// plan provides a mock function with given fields: ctx
func (_m *Mockphaser) plan(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockphaser_plan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'plan'
type Mockphaser_plan_Call struct {
	*mock.Call
}

// plan is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Mockphaser_Expecter) plan(ctx interface{}) *Mockphaser_plan_Call {
	return &Mockphaser_plan_Call{Call: _e.mock.On("plan", ctx)}
}

func (_c *Mockphaser_plan_Call) Run(run func(ctx context.Context)) *Mockphaser_plan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Mockphaser_plan_Call) Return(alreadyApplied bool, err error) *Mockphaser_plan_Call {
	_c.Call.Return(alreadyApplied, err)
	return _c
}

func (_c *Mockphaser_plan_Call) RunAndReturn(run func(context.Context) (bool, error)) *Mockphaser_plan_Call {
	_c.Call.Return(run)
	return _c
}

// rollback provides a mock function with given fields: ctx
func (_m *Mockphaser) rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockphaser_rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'rollback'
type Mockphaser_rollback_Call struct {
	*mock.Call
}

// rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Mockphaser_Expecter) rollback(ctx interface{}) *Mockphaser_rollback_Call {
	return &Mockphaser_rollback_Call{Call: _e.mock.On("rollback", ctx)}
}

func (_c *Mockphaser_rollback_Call) Run(run func(ctx context.Context)) *Mockphaser_rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Mockphaser_rollback_Call) Return(_a0 error) *Mockphaser_rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockphaser_rollback_Call) RunAndReturn(run func(context.Context) error) *Mockphaser_rollback_Call {
	_c.Call.Return(run)
	return _c
}

// verify provides a mock function with given fields: ctx
func (_m *Mockphaser) verify(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockphaser_verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'verify'
type Mockphaser_verify_Call struct {
	*mock.Call
}

// verify is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Mockphaser_Expecter) verify(ctx interface{}) *Mockphaser_verify_Call {
	return &Mockphaser_verify_Call{Call: _e.mock.On("verify", ctx)}
}

func (_c *Mockphaser_verify_Call) Run(run func(ctx context.Context)) *Mockphaser_verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Mockphaser_verify_Call) Return(_a0 error) *Mockphaser_verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockphaser_verify_Call) RunAndReturn(run func(context.Context) error) *Mockphaser_verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockphaser creates a new instance of Mockphaser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockphaser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockphaser {
	mock := &Mockphaser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
