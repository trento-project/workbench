// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	operator "github.com/trento-project/workbench/pkg/operator"
)

// MockOperator is an autogenerated mock type for the Operator type
type MockOperator struct {
	mock.Mock
}

type MockOperator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOperator) EXPECT() *MockOperator_Expecter {
	return &MockOperator_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx
func (_m *MockOperator) Run(ctx context.Context) *operator.ExecutionReport {
	ret := _m.Called(ctx)

	var r0 *operator.ExecutionReport
	if rf, ok := ret.Get(0).(func(context.Context) *operator.ExecutionReport); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operator.ExecutionReport)
		}
	}

	return r0
}

// MockOperator_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockOperator_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOperator_Expecter) Run(ctx interface{}) *MockOperator_Run_Call {
	return &MockOperator_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockOperator_Run_Call) Run(run func(ctx context.Context)) *MockOperator_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOperator_Run_Call) Return(_a0 *operator.ExecutionReport) *MockOperator_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOperator_Run_Call) RunAndReturn(run func(context.Context) *operator.ExecutionReport) *MockOperator_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOperator creates a new instance of MockOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOperator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOperator {
	mock := &MockOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
