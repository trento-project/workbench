// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCrm is an autogenerated mock type for the Crm type
type MockCrm struct {
	mock.Mock
}

type MockCrm_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCrm) EXPECT() *MockCrm_Expecter {
	return &MockCrm_Expecter{mock: &_m.Mock}
}

// GetClusterId provides a mock function with no fields
func (_m *MockCrm) GetClusterId() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClusterId")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCrm_GetClusterId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterId'
type MockCrm_GetClusterId_Call struct {
	*mock.Call
}

// GetClusterId is a helper method to define mock.On call
func (_e *MockCrm_Expecter) GetClusterId() *MockCrm_GetClusterId_Call {
	return &MockCrm_GetClusterId_Call{Call: _e.mock.On("GetClusterId")}
}

func (_c *MockCrm_GetClusterId_Call) Run(run func()) *MockCrm_GetClusterId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCrm_GetClusterId_Call) Return(_a0 string, _a1 error) *MockCrm_GetClusterId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCrm_GetClusterId_Call) RunAndReturn(run func() (string, error)) *MockCrm_GetClusterId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCrm creates a new instance of MockCrm. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCrm(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCrm {
	mock := &MockCrm{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
