// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v22dbus "github.com/coreos/go-systemd/v22/dbus"
)

// MockDbusConnector is an autogenerated mock type for the DbusConnector type
type MockDbusConnector struct {
	mock.Mock
}

type MockDbusConnector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDbusConnector) EXPECT() *MockDbusConnector_Expecter {
	return &MockDbusConnector_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockDbusConnector) Close() {
	_m.Called()
}

// MockDbusConnector_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDbusConnector_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDbusConnector_Expecter) Close() *MockDbusConnector_Close_Call {
	return &MockDbusConnector_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDbusConnector_Close_Call) Run(run func()) *MockDbusConnector_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDbusConnector_Close_Call) Return() *MockDbusConnector_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDbusConnector_Close_Call) RunAndReturn(run func()) *MockDbusConnector_Close_Call {
	_c.Run(run)
	return _c
}

// DisableUnitFilesContext provides a mock function with given fields: ctx, files, runtime
func (_m *MockDbusConnector) DisableUnitFilesContext(ctx context.Context, files []string, runtime bool) ([]v22dbus.DisableUnitFileChange, error) {
	ret := _m.Called(ctx, files, runtime)

	if len(ret) == 0 {
		panic("no return value specified for DisableUnitFilesContext")
	}

	var r0 []v22dbus.DisableUnitFileChange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, bool) ([]v22dbus.DisableUnitFileChange, error)); ok {
		return rf(ctx, files, runtime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, bool) []v22dbus.DisableUnitFileChange); ok {
		r0 = rf(ctx, files, runtime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v22dbus.DisableUnitFileChange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, bool) error); ok {
		r1 = rf(ctx, files, runtime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbusConnector_DisableUnitFilesContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableUnitFilesContext'
type MockDbusConnector_DisableUnitFilesContext_Call struct {
	*mock.Call
}

// DisableUnitFilesContext is a helper method to define mock.On call
//   - ctx context.Context
//   - files []string
//   - runtime bool
func (_e *MockDbusConnector_Expecter) DisableUnitFilesContext(ctx interface{}, files interface{}, runtime interface{}) *MockDbusConnector_DisableUnitFilesContext_Call {
	return &MockDbusConnector_DisableUnitFilesContext_Call{Call: _e.mock.On("DisableUnitFilesContext", ctx, files, runtime)}
}

func (_c *MockDbusConnector_DisableUnitFilesContext_Call) Run(run func(ctx context.Context, files []string, runtime bool)) *MockDbusConnector_DisableUnitFilesContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(bool))
	})
	return _c
}

func (_c *MockDbusConnector_DisableUnitFilesContext_Call) Return(_a0 []v22dbus.DisableUnitFileChange, _a1 error) *MockDbusConnector_DisableUnitFilesContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbusConnector_DisableUnitFilesContext_Call) RunAndReturn(run func(context.Context, []string, bool) ([]v22dbus.DisableUnitFileChange, error)) *MockDbusConnector_DisableUnitFilesContext_Call {
	_c.Call.Return(run)
	return _c
}

// EnableUnitFilesContext provides a mock function with given fields: ctx, files, runtime, force
func (_m *MockDbusConnector) EnableUnitFilesContext(ctx context.Context, files []string, runtime bool, force bool) (bool, []v22dbus.EnableUnitFileChange, error) {
	ret := _m.Called(ctx, files, runtime, force)

	if len(ret) == 0 {
		panic("no return value specified for EnableUnitFilesContext")
	}

	var r0 bool
	var r1 []v22dbus.EnableUnitFileChange
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, bool, bool) (bool, []v22dbus.EnableUnitFileChange, error)); ok {
		return rf(ctx, files, runtime, force)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, bool, bool) bool); ok {
		r0 = rf(ctx, files, runtime, force)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, bool, bool) []v22dbus.EnableUnitFileChange); ok {
		r1 = rf(ctx, files, runtime, force)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]v22dbus.EnableUnitFileChange)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string, bool, bool) error); ok {
		r2 = rf(ctx, files, runtime, force)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDbusConnector_EnableUnitFilesContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableUnitFilesContext'
type MockDbusConnector_EnableUnitFilesContext_Call struct {
	*mock.Call
}

// EnableUnitFilesContext is a helper method to define mock.On call
//   - ctx context.Context
//   - files []string
//   - runtime bool
//   - force bool
func (_e *MockDbusConnector_Expecter) EnableUnitFilesContext(ctx interface{}, files interface{}, runtime interface{}, force interface{}) *MockDbusConnector_EnableUnitFilesContext_Call {
	return &MockDbusConnector_EnableUnitFilesContext_Call{Call: _e.mock.On("EnableUnitFilesContext", ctx, files, runtime, force)}
}

func (_c *MockDbusConnector_EnableUnitFilesContext_Call) Run(run func(ctx context.Context, files []string, runtime bool, force bool)) *MockDbusConnector_EnableUnitFilesContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(bool), args[3].(bool))
	})
	return _c
}

func (_c *MockDbusConnector_EnableUnitFilesContext_Call) Return(_a0 bool, _a1 []v22dbus.EnableUnitFileChange, _a2 error) *MockDbusConnector_EnableUnitFilesContext_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDbusConnector_EnableUnitFilesContext_Call) RunAndReturn(run func(context.Context, []string, bool, bool) (bool, []v22dbus.EnableUnitFileChange, error)) *MockDbusConnector_EnableUnitFilesContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnitPropertyContext provides a mock function with given fields: ctx, unit, propertyName
func (_m *MockDbusConnector) GetUnitPropertyContext(ctx context.Context, unit string, propertyName string) (*v22dbus.Property, error) {
	ret := _m.Called(ctx, unit, propertyName)

	if len(ret) == 0 {
		panic("no return value specified for GetUnitPropertyContext")
	}

	var r0 *v22dbus.Property
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v22dbus.Property, error)); ok {
		return rf(ctx, unit, propertyName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v22dbus.Property); ok {
		r0 = rf(ctx, unit, propertyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v22dbus.Property)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, unit, propertyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbusConnector_GetUnitPropertyContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnitPropertyContext'
type MockDbusConnector_GetUnitPropertyContext_Call struct {
	*mock.Call
}

// GetUnitPropertyContext is a helper method to define mock.On call
//   - ctx context.Context
//   - unit string
//   - propertyName string
func (_e *MockDbusConnector_Expecter) GetUnitPropertyContext(ctx interface{}, unit interface{}, propertyName interface{}) *MockDbusConnector_GetUnitPropertyContext_Call {
	return &MockDbusConnector_GetUnitPropertyContext_Call{Call: _e.mock.On("GetUnitPropertyContext", ctx, unit, propertyName)}
}

func (_c *MockDbusConnector_GetUnitPropertyContext_Call) Run(run func(ctx context.Context, unit string, propertyName string)) *MockDbusConnector_GetUnitPropertyContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDbusConnector_GetUnitPropertyContext_Call) Return(_a0 *v22dbus.Property, _a1 error) *MockDbusConnector_GetUnitPropertyContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbusConnector_GetUnitPropertyContext_Call) RunAndReturn(run func(context.Context, string, string) (*v22dbus.Property, error)) *MockDbusConnector_GetUnitPropertyContext_Call {
	_c.Call.Return(run)
	return _c
}

// ReloadContext provides a mock function with given fields: ctx
func (_m *MockDbusConnector) ReloadContext(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReloadContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDbusConnector_ReloadContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReloadContext'
type MockDbusConnector_ReloadContext_Call struct {
	*mock.Call
}

// ReloadContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDbusConnector_Expecter) ReloadContext(ctx interface{}) *MockDbusConnector_ReloadContext_Call {
	return &MockDbusConnector_ReloadContext_Call{Call: _e.mock.On("ReloadContext", ctx)}
}

func (_c *MockDbusConnector_ReloadContext_Call) Run(run func(ctx context.Context)) *MockDbusConnector_ReloadContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDbusConnector_ReloadContext_Call) Return(_a0 error) *MockDbusConnector_ReloadContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDbusConnector_ReloadContext_Call) RunAndReturn(run func(context.Context) error) *MockDbusConnector_ReloadContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDbusConnector creates a new instance of MockDbusConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDbusConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDbusConnector {
	mock := &MockDbusConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
