// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSaptune is an autogenerated mock type for the Saptune type
type MockSaptune struct {
	mock.Mock
}

type MockSaptune_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSaptune) EXPECT() *MockSaptune_Expecter {
	return &MockSaptune_Expecter{mock: &_m.Mock}
}

// ApplySolution provides a mock function with given fields: ctx, solution
func (_m *MockSaptune) ApplySolution(ctx context.Context, solution string) error {
	ret := _m.Called(ctx, solution)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, solution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSaptune_ApplySolution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplySolution'
type MockSaptune_ApplySolution_Call struct {
	*mock.Call
}

// ApplySolution is a helper method to define mock.On call
//   - ctx context.Context
//   - solution string
func (_e *MockSaptune_Expecter) ApplySolution(ctx interface{}, solution interface{}) *MockSaptune_ApplySolution_Call {
	return &MockSaptune_ApplySolution_Call{Call: _e.mock.On("ApplySolution", ctx, solution)}
}

func (_c *MockSaptune_ApplySolution_Call) Run(run func(ctx context.Context, solution string)) *MockSaptune_ApplySolution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSaptune_ApplySolution_Call) Return(_a0 error) *MockSaptune_ApplySolution_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSaptune_ApplySolution_Call) RunAndReturn(run func(context.Context, string) error) *MockSaptune_ApplySolution_Call {
	_c.Call.Return(run)
	return _c
}

// CheckVersionSupport provides a mock function with given fields: ctx
func (_m *MockSaptune) CheckVersionSupport(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSaptune_CheckVersionSupport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckVersionSupport'
type MockSaptune_CheckVersionSupport_Call struct {
	*mock.Call
}

// CheckVersionSupport is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSaptune_Expecter) CheckVersionSupport(ctx interface{}) *MockSaptune_CheckVersionSupport_Call {
	return &MockSaptune_CheckVersionSupport_Call{Call: _e.mock.On("CheckVersionSupport", ctx)}
}

func (_c *MockSaptune_CheckVersionSupport_Call) Run(run func(ctx context.Context)) *MockSaptune_CheckVersionSupport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSaptune_CheckVersionSupport_Call) Return(_a0 error) *MockSaptune_CheckVersionSupport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSaptune_CheckVersionSupport_Call) RunAndReturn(run func(context.Context) error) *MockSaptune_CheckVersionSupport_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppliedSolution provides a mock function with given fields: ctx
func (_m *MockSaptune) GetAppliedSolution(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSaptune_GetAppliedSolution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppliedSolution'
type MockSaptune_GetAppliedSolution_Call struct {
	*mock.Call
}

// GetAppliedSolution is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSaptune_Expecter) GetAppliedSolution(ctx interface{}) *MockSaptune_GetAppliedSolution_Call {
	return &MockSaptune_GetAppliedSolution_Call{Call: _e.mock.On("GetAppliedSolution", ctx)}
}

func (_c *MockSaptune_GetAppliedSolution_Call) Run(run func(ctx context.Context)) *MockSaptune_GetAppliedSolution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSaptune_GetAppliedSolution_Call) Return(_a0 string, _a1 error) *MockSaptune_GetAppliedSolution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSaptune_GetAppliedSolution_Call) RunAndReturn(run func(context.Context) (string, error)) *MockSaptune_GetAppliedSolution_Call {
	_c.Call.Return(run)
	return _c
}

// RevertSolution provides a mock function with given fields: ctx, solution
func (_m *MockSaptune) RevertSolution(ctx context.Context, solution string) error {
	ret := _m.Called(ctx, solution)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, solution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSaptune_RevertSolution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevertSolution'
type MockSaptune_RevertSolution_Call struct {
	*mock.Call
}

// RevertSolution is a helper method to define mock.On call
//   - ctx context.Context
//   - solution string
func (_e *MockSaptune_Expecter) RevertSolution(ctx interface{}, solution interface{}) *MockSaptune_RevertSolution_Call {
	return &MockSaptune_RevertSolution_Call{Call: _e.mock.On("RevertSolution", ctx, solution)}
}

func (_c *MockSaptune_RevertSolution_Call) Run(run func(ctx context.Context, solution string)) *MockSaptune_RevertSolution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSaptune_RevertSolution_Call) Return(_a0 error) *MockSaptune_RevertSolution_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSaptune_RevertSolution_Call) RunAndReturn(run func(context.Context, string) error) *MockSaptune_RevertSolution_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSaptune creates a new instance of MockSaptune. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSaptune(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSaptune {
	mock := &MockSaptune{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
