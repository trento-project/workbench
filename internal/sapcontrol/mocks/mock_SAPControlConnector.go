// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	sapcontrol "github.com/trento-project/workbench/internal/sapcontrol"
)

// MockSAPControlConnector is an autogenerated mock type for the SAPControlConnector type
type MockSAPControlConnector struct {
	mock.Mock
}

type MockSAPControlConnector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSAPControlConnector) EXPECT() *MockSAPControlConnector_Expecter {
	return &MockSAPControlConnector_Expecter{mock: &_m.Mock}
}

// GetProcessListContext provides a mock function with given fields: ctx, request
func (_m *MockSAPControlConnector) GetProcessListContext(ctx context.Context, request *sapcontrol.GetProcessList) (*sapcontrol.GetProcessListResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *sapcontrol.GetProcessListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sapcontrol.GetProcessList) (*sapcontrol.GetProcessListResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sapcontrol.GetProcessList) *sapcontrol.GetProcessListResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrol.GetProcessListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sapcontrol.GetProcessList) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSAPControlConnector_GetProcessListContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessListContext'
type MockSAPControlConnector_GetProcessListContext_Call struct {
	*mock.Call
}

// GetProcessListContext is a helper method to define mock.On call
//   - ctx context.Context
//   - request *sapcontrol.GetProcessList
func (_e *MockSAPControlConnector_Expecter) GetProcessListContext(ctx interface{}, request interface{}) *MockSAPControlConnector_GetProcessListContext_Call {
	return &MockSAPControlConnector_GetProcessListContext_Call{Call: _e.mock.On("GetProcessListContext", ctx, request)}
}

func (_c *MockSAPControlConnector_GetProcessListContext_Call) Run(run func(ctx context.Context, request *sapcontrol.GetProcessList)) *MockSAPControlConnector_GetProcessListContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sapcontrol.GetProcessList))
	})
	return _c
}

func (_c *MockSAPControlConnector_GetProcessListContext_Call) Return(_a0 *sapcontrol.GetProcessListResponse, _a1 error) *MockSAPControlConnector_GetProcessListContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSAPControlConnector_GetProcessListContext_Call) RunAndReturn(run func(context.Context, *sapcontrol.GetProcessList) (*sapcontrol.GetProcessListResponse, error)) *MockSAPControlConnector_GetProcessListContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemInstanceListContext provides a mock function with given fields: ctx, request
func (_m *MockSAPControlConnector) GetSystemInstanceListContext(ctx context.Context, request *sapcontrol.GetSystemInstanceList) (*sapcontrol.GetSystemInstanceListResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *sapcontrol.GetSystemInstanceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sapcontrol.GetSystemInstanceList) (*sapcontrol.GetSystemInstanceListResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sapcontrol.GetSystemInstanceList) *sapcontrol.GetSystemInstanceListResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrol.GetSystemInstanceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sapcontrol.GetSystemInstanceList) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSAPControlConnector_GetSystemInstanceListContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemInstanceListContext'
type MockSAPControlConnector_GetSystemInstanceListContext_Call struct {
	*mock.Call
}

// GetSystemInstanceListContext is a helper method to define mock.On call
//   - ctx context.Context
//   - request *sapcontrol.GetSystemInstanceList
func (_e *MockSAPControlConnector_Expecter) GetSystemInstanceListContext(ctx interface{}, request interface{}) *MockSAPControlConnector_GetSystemInstanceListContext_Call {
	return &MockSAPControlConnector_GetSystemInstanceListContext_Call{Call: _e.mock.On("GetSystemInstanceListContext", ctx, request)}
}

func (_c *MockSAPControlConnector_GetSystemInstanceListContext_Call) Run(run func(ctx context.Context, request *sapcontrol.GetSystemInstanceList)) *MockSAPControlConnector_GetSystemInstanceListContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sapcontrol.GetSystemInstanceList))
	})
	return _c
}

func (_c *MockSAPControlConnector_GetSystemInstanceListContext_Call) Return(_a0 *sapcontrol.GetSystemInstanceListResponse, _a1 error) *MockSAPControlConnector_GetSystemInstanceListContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSAPControlConnector_GetSystemInstanceListContext_Call) RunAndReturn(run func(context.Context, *sapcontrol.GetSystemInstanceList) (*sapcontrol.GetSystemInstanceListResponse, error)) *MockSAPControlConnector_GetSystemInstanceListContext_Call {
	_c.Call.Return(run)
	return _c
}

// StartContext provides a mock function with given fields: ctx, request
func (_m *MockSAPControlConnector) StartContext(ctx context.Context, request *sapcontrol.Start) (*sapcontrol.StartResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *sapcontrol.StartResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sapcontrol.Start) (*sapcontrol.StartResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sapcontrol.Start) *sapcontrol.StartResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrol.StartResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sapcontrol.Start) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSAPControlConnector_StartContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartContext'
type MockSAPControlConnector_StartContext_Call struct {
	*mock.Call
}

// StartContext is a helper method to define mock.On call
//   - ctx context.Context
//   - request *sapcontrol.Start
func (_e *MockSAPControlConnector_Expecter) StartContext(ctx interface{}, request interface{}) *MockSAPControlConnector_StartContext_Call {
	return &MockSAPControlConnector_StartContext_Call{Call: _e.mock.On("StartContext", ctx, request)}
}

func (_c *MockSAPControlConnector_StartContext_Call) Run(run func(ctx context.Context, request *sapcontrol.Start)) *MockSAPControlConnector_StartContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sapcontrol.Start))
	})
	return _c
}

func (_c *MockSAPControlConnector_StartContext_Call) Return(_a0 *sapcontrol.StartResponse, _a1 error) *MockSAPControlConnector_StartContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSAPControlConnector_StartContext_Call) RunAndReturn(run func(context.Context, *sapcontrol.Start) (*sapcontrol.StartResponse, error)) *MockSAPControlConnector_StartContext_Call {
	_c.Call.Return(run)
	return _c
}

// StartSystemContext provides a mock function with given fields: ctx, request
func (_m *MockSAPControlConnector) StartSystemContext(ctx context.Context, request *sapcontrol.StartSystem) (*sapcontrol.StartSystemResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *sapcontrol.StartSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sapcontrol.StartSystem) (*sapcontrol.StartSystemResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sapcontrol.StartSystem) *sapcontrol.StartSystemResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrol.StartSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sapcontrol.StartSystem) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSAPControlConnector_StartSystemContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSystemContext'
type MockSAPControlConnector_StartSystemContext_Call struct {
	*mock.Call
}

// StartSystemContext is a helper method to define mock.On call
//   - ctx context.Context
//   - request *sapcontrol.StartSystem
func (_e *MockSAPControlConnector_Expecter) StartSystemContext(ctx interface{}, request interface{}) *MockSAPControlConnector_StartSystemContext_Call {
	return &MockSAPControlConnector_StartSystemContext_Call{Call: _e.mock.On("StartSystemContext", ctx, request)}
}

func (_c *MockSAPControlConnector_StartSystemContext_Call) Run(run func(ctx context.Context, request *sapcontrol.StartSystem)) *MockSAPControlConnector_StartSystemContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sapcontrol.StartSystem))
	})
	return _c
}

func (_c *MockSAPControlConnector_StartSystemContext_Call) Return(_a0 *sapcontrol.StartSystemResponse, _a1 error) *MockSAPControlConnector_StartSystemContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSAPControlConnector_StartSystemContext_Call) RunAndReturn(run func(context.Context, *sapcontrol.StartSystem) (*sapcontrol.StartSystemResponse, error)) *MockSAPControlConnector_StartSystemContext_Call {
	_c.Call.Return(run)
	return _c
}

// StopContext provides a mock function with given fields: ctx, request
func (_m *MockSAPControlConnector) StopContext(ctx context.Context, request *sapcontrol.Stop) (*sapcontrol.StopResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *sapcontrol.StopResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sapcontrol.Stop) (*sapcontrol.StopResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sapcontrol.Stop) *sapcontrol.StopResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrol.StopResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sapcontrol.Stop) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSAPControlConnector_StopContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopContext'
type MockSAPControlConnector_StopContext_Call struct {
	*mock.Call
}

// StopContext is a helper method to define mock.On call
//   - ctx context.Context
//   - request *sapcontrol.Stop
func (_e *MockSAPControlConnector_Expecter) StopContext(ctx interface{}, request interface{}) *MockSAPControlConnector_StopContext_Call {
	return &MockSAPControlConnector_StopContext_Call{Call: _e.mock.On("StopContext", ctx, request)}
}

func (_c *MockSAPControlConnector_StopContext_Call) Run(run func(ctx context.Context, request *sapcontrol.Stop)) *MockSAPControlConnector_StopContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sapcontrol.Stop))
	})
	return _c
}

func (_c *MockSAPControlConnector_StopContext_Call) Return(_a0 *sapcontrol.StopResponse, _a1 error) *MockSAPControlConnector_StopContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSAPControlConnector_StopContext_Call) RunAndReturn(run func(context.Context, *sapcontrol.Stop) (*sapcontrol.StopResponse, error)) *MockSAPControlConnector_StopContext_Call {
	_c.Call.Return(run)
	return _c
}

// StopSystemContext provides a mock function with given fields: ctx, request
func (_m *MockSAPControlConnector) StopSystemContext(ctx context.Context, request *sapcontrol.StopSystem) (*sapcontrol.StopSystemResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *sapcontrol.StopSystemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sapcontrol.StopSystem) (*sapcontrol.StopSystemResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sapcontrol.StopSystem) *sapcontrol.StopSystemResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrol.StopSystemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sapcontrol.StopSystem) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSAPControlConnector_StopSystemContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopSystemContext'
type MockSAPControlConnector_StopSystemContext_Call struct {
	*mock.Call
}

// StopSystemContext is a helper method to define mock.On call
//   - ctx context.Context
//   - request *sapcontrol.StopSystem
func (_e *MockSAPControlConnector_Expecter) StopSystemContext(ctx interface{}, request interface{}) *MockSAPControlConnector_StopSystemContext_Call {
	return &MockSAPControlConnector_StopSystemContext_Call{Call: _e.mock.On("StopSystemContext", ctx, request)}
}

func (_c *MockSAPControlConnector_StopSystemContext_Call) Run(run func(ctx context.Context, request *sapcontrol.StopSystem)) *MockSAPControlConnector_StopSystemContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sapcontrol.StopSystem))
	})
	return _c
}

func (_c *MockSAPControlConnector_StopSystemContext_Call) Return(_a0 *sapcontrol.StopSystemResponse, _a1 error) *MockSAPControlConnector_StopSystemContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSAPControlConnector_StopSystemContext_Call) RunAndReturn(run func(context.Context, *sapcontrol.StopSystem) (*sapcontrol.StopSystemResponse, error)) *MockSAPControlConnector_StopSystemContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSAPControlConnector creates a new instance of MockSAPControlConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSAPControlConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSAPControlConnector {
	mock := &MockSAPControlConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
