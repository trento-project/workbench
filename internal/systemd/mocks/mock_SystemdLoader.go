// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	slog "log/slog"

	mock "github.com/stretchr/testify/mock"

	systemd "github.com/trento-project/workbench/internal/systemd"
)

// MockSystemdLoader is an autogenerated mock type for the SystemdLoader type
type MockSystemdLoader struct {
	mock.Mock
}

type MockSystemdLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSystemdLoader) EXPECT() *MockSystemdLoader_Expecter {
	return &MockSystemdLoader_Expecter{mock: &_m.Mock}
}

// NewSystemd provides a mock function with given fields: ctx, logger, options
func (_m *MockSystemdLoader) NewSystemd(ctx context.Context, logger *slog.Logger, options ...systemd.ConnectorOption) (systemd.Systemd, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, logger)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NewSystemd")
	}

	var r0 systemd.Systemd
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *slog.Logger, ...systemd.ConnectorOption) (systemd.Systemd, error)); ok {
		return rf(ctx, logger, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *slog.Logger, ...systemd.ConnectorOption) systemd.Systemd); ok {
		r0 = rf(ctx, logger, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(systemd.Systemd)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *slog.Logger, ...systemd.ConnectorOption) error); ok {
		r1 = rf(ctx, logger, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemdLoader_NewSystemd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewSystemd'
type MockSystemdLoader_NewSystemd_Call struct {
	*mock.Call
}

// NewSystemd is a helper method to define mock.On call
//   - ctx context.Context
//   - logger *slog.Logger
//   - options ...systemd.SystemdConnectorOption
func (_e *MockSystemdLoader_Expecter) NewSystemd(ctx interface{}, logger interface{}, options ...interface{}) *MockSystemdLoader_NewSystemd_Call {
	return &MockSystemdLoader_NewSystemd_Call{Call: _e.mock.On("NewSystemd",
		append([]interface{}{ctx, logger}, options...)...)}
}

func (_c *MockSystemdLoader_NewSystemd_Call) Run(run func(ctx context.Context, logger *slog.Logger, options ...systemd.ConnectorOption)) *MockSystemdLoader_NewSystemd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]systemd.ConnectorOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(systemd.ConnectorOption)
			}
		}
		run(args[0].(context.Context), args[1].(*slog.Logger), variadicArgs...)
	})
	return _c
}

func (_c *MockSystemdLoader_NewSystemd_Call) Return(_a0 systemd.Systemd, _a1 error) *MockSystemdLoader_NewSystemd_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemdLoader_NewSystemd_Call) RunAndReturn(run func(context.Context, *slog.Logger, ...systemd.ConnectorOption) (systemd.Systemd, error)) *MockSystemdLoader_NewSystemd_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSystemdLoader creates a new instance of MockSystemdLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSystemdLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSystemdLoader {
	mock := &MockSystemdLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
