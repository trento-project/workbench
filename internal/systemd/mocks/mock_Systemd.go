// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSystemd is an autogenerated mock type for the Systemd type
type MockSystemd struct {
	mock.Mock
}

type MockSystemd_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSystemd) EXPECT() *MockSystemd_Expecter {
	return &MockSystemd_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockSystemd) Close() {
	_m.Called()
}

// MockSystemd_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSystemd_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSystemd_Expecter) Close() *MockSystemd_Close_Call {
	return &MockSystemd_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSystemd_Close_Call) Run(run func()) *MockSystemd_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemd_Close_Call) Return() *MockSystemd_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSystemd_Close_Call) RunAndReturn(run func()) *MockSystemd_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Disable provides a mock function with given fields: ctx, service
func (_m *MockSystemd) Disable(ctx context.Context, service string) error {
	ret := _m.Called(ctx, service)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemd_Disable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable'
type MockSystemd_Disable_Call struct {
	*mock.Call
}

// Disable is a helper method to define mock.On call
//   - ctx context.Context
//   - service string
func (_e *MockSystemd_Expecter) Disable(ctx interface{}, service interface{}) *MockSystemd_Disable_Call {
	return &MockSystemd_Disable_Call{Call: _e.mock.On("Disable", ctx, service)}
}

func (_c *MockSystemd_Disable_Call) Run(run func(ctx context.Context, service string)) *MockSystemd_Disable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSystemd_Disable_Call) Return(_a0 error) *MockSystemd_Disable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemd_Disable_Call) RunAndReturn(run func(context.Context, string) error) *MockSystemd_Disable_Call {
	_c.Call.Return(run)
	return _c
}

// Enable provides a mock function with given fields: ctx, service
func (_m *MockSystemd) Enable(ctx context.Context, service string) error {
	ret := _m.Called(ctx, service)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSystemd_Enable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enable'
type MockSystemd_Enable_Call struct {
	*mock.Call
}

// Enable is a helper method to define mock.On call
//   - ctx context.Context
//   - service string
func (_e *MockSystemd_Expecter) Enable(ctx interface{}, service interface{}) *MockSystemd_Enable_Call {
	return &MockSystemd_Enable_Call{Call: _e.mock.On("Enable", ctx, service)}
}

func (_c *MockSystemd_Enable_Call) Run(run func(ctx context.Context, service string)) *MockSystemd_Enable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSystemd_Enable_Call) Return(_a0 error) *MockSystemd_Enable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSystemd_Enable_Call) RunAndReturn(run func(context.Context, string) error) *MockSystemd_Enable_Call {
	_c.Call.Return(run)
	return _c
}

// IsEnabled provides a mock function with given fields: ctx, service
func (_m *MockSystemd) IsEnabled(ctx context.Context, service string) (bool, error) {
	ret := _m.Called(ctx, service)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, service)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, service)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSystemd_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type MockSystemd_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
//   - ctx context.Context
//   - service string
func (_e *MockSystemd_Expecter) IsEnabled(ctx interface{}, service interface{}) *MockSystemd_IsEnabled_Call {
	return &MockSystemd_IsEnabled_Call{Call: _e.mock.On("IsEnabled", ctx, service)}
}

func (_c *MockSystemd_IsEnabled_Call) Run(run func(ctx context.Context, service string)) *MockSystemd_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSystemd_IsEnabled_Call) Return(_a0 bool, _a1 error) *MockSystemd_IsEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSystemd_IsEnabled_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockSystemd_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSystemd creates a new instance of MockSystemd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSystemd(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSystemd {
	mock := &MockSystemd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
